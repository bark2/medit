#include <ctype.h>
#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <unistd.h>
#include <unordered_map>

// todo: public all poroperties and special functions
// and add a lua interpreter


std::string convertoTerminal(char* s) {
	std::string ts;
	if (*s != '\\')
		return s;
	for (int i = 0 ; s[i] != '\0'; i++) {
		if (s[i] == '\\') {
			if (s[i+1] == 'E' || s[i+1] == 'e') {
				ts += 0x1b;
				i += 2;
			}
		} else if (s[i] == '^' && isalpha(s[i+1]))
			ts += 0x1f & tolower(s[i+1]);
	}
}

#define TMP_LINE 100
// returns unordered_map of (tcap, string)
// (tcap, nullptr) for properties
std::unordered_map<std::string, std::string> infocmpParser(void) {
	FILE* fp;
	std::unordered_map<std::string, std::string> umap;
	if (!(fp = popen("/usr/bin/infocmp -cI0", "r"))) {
		perror("popen");
		return umap;
	}
	char str[TMP_LINE];
	char* s = str;
	char *name, *typed;
	while ((s = fgets(s, TMP_LINE - 1, fp)) != nullptr) {
		if (*s++ != '\t')
			continue;
		name = s;
		for (; *s != '='; s++)
			;
		*s = '\0';
		s += 2;
		typed = (*s == '\'')? s+1 : s;
		while (*s++ != '.') ;
		s[((s[-2] == '\'')? -2 : -1)] = '\0';
		if (!strcmp(name, "F") || !strcmp(typed, "T"))
			continue;
		umap.insert(std::pair<std::string, std::string>(name, typed));
	}
	pclose(fp);
	return umap;
}

/*** defines ***/
#define CTRL_KEY(k) ((k) & 0x1f)

/*** data ***/

struct editorSettings {
	int cx, cy;
	int screenrows;
	int screencols;
	struct termios orig_termios;
};

struct editorSettings E;

/*** terminal ***/

void die(const char *s) {
	write(STDOUT_FILENO, "\x1b[2J", 4);
	write(STDOUT_FILENO, "\x1b[H", 3);

	perror(s);
	exit(1);
}

void disableRawMode() {
	if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &E.orig_termios) == -1)
		die("tcsetattr");
}

void enableRawMode() {
	if (tcgetattr(STDIN_FILENO, &E.orig_termios) == -1) die("tcgetattr");
	atexit(disableRawMode);

	struct termios raw = E.orig_termios;
	raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
	raw.c_oflag &= ~(OPOST);
	raw.c_cflag |= (CS8);
	raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);
	raw.c_cc[VMIN] = 0;
	raw.c_cc[VTIME] = 1;

	if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1) die("tcsetattr");
}

void processKeypress() {
}

/*** init ***/

void init() {
	E.cx = 0;
	E.cy = 0;

}

int main() {
	//	enableRawMode();
	init();
	std::unordered_map<std::string, std::string> uamp = infocmpParser();
	
	while (true) {
	}

	return 0;
}
